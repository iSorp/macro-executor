{
	"name": "macro-executor",
	"displayName": "Macro Executor Language",
	"description": "Fanuc Macro-Executor Programming Language",
	"version": "0.4.3",
	"author": "iSorp",
	"publisher": "iSorp",
	"license": "MIT",
	"preview": false,
	"categories": [
		"Programming Languages",
		"Snippets"
	],
	"keywords": [
		"multi-root ready",
		"Macro Executor",
		"Fanuc",
		"CNC",
		"NC"
	],
	"homepage": "https://github.com/iSorp/macro-executor",
	"repository": {
		"type": "git",
		"url": "https://github.com/iSorp/macro-executor.git"
	},
	"bugs": {
		"url": "https://github.com/iSorp/macro-executor/issues"
	},
	"icon": "resources/icon.png",
	"engines": {
		"vscode": "^1.63.0"
	},
	"activationEvents": [
		"onLanguage:macro"
	],
	"main": "./client/out/extension",
	"contributes": {
		"languages": [
			{
				"id": "macro",
				"aliases": [
					"Macro Executor",
					"Macro Compiler"
				],
				"extensions": [
					".src",
					".def",
					".lnk"
				],
				"configuration": "./syntaxes/macro.configuration.json"
			}
		],
		"grammars": [
			{
				"language": "macro",
				"scopeName": "source.macro",
				"path": "./syntaxes/macro.tmLanguage.json"
			}
		],
		"snippets": [
			{
				"language": "macro",
				"path": "./snippets/snippets.json"
			}
		],
		"commands": [
			{
				"command": "macro.compile",
				"title": "%macro.compile%",
				"category": "Macro"
			},
			{
				"command": "macro.build",
				"title": "%macro.build%",
				"category": "Macro"
			},
			{
				"command": "macro.clean",
				"title": "%macro.clean%",
				"category": "Macro"
			},
			{
				"command": "macro.setCompiler",
				"title": "%macro.setCompiler%",
				"category": "Macro"
			},
			{
				"command": "macro.setExportPath",
				"title": "%macro.setExportPath%",
				"category": "Macro"
			},
			{
				"command": "macro.setControlType",
				"title": "%macro.setControlType%",
				"category": "Macro"
			},
			{
				"command": "macro.action.refactorsequeces",
				"title": "%macro.action.refactorsequeces%",
				"category": "Macro"
			},
			{
				"command": "macro.action.addsequeces",
				"title": "%macro.action.addsequeces%",
				"category": "Macro"
			},
			{
				"command": "macro.action.validate",
				"title": "%macro.action.validate%",
				"category": "Macro"
			}
		],
		"menus": {
			"editor/context": [
				{
					"when": "resourceLangId == macro",
					"command": "macro.action.refactorsequeces",
					"group": "macro.action@1"
				},
				{
					"when": "resourceLangId == macro",
					"command": "macro.action.addsequeces",
					"group": "macro.action@1"
				}
			]
		},
		"keybindings": [
			{
				"command": "macro.build",
				"key": "shift+ctrl+l",
				"when": "editorFocus"
			},
			{
				"command": "macro.compile",
				"key": "shift+ctrl+b",
				"when": "editorFocus"
			},
			{
				"command": "macro.clean",
				"key": "shift+ctrl+c",
				"when": "editorFocus"
			}
		],
		"configuration": {
			"type": "object",
			"title": "Macro Executor",
			"properties": {
				"macro.callFunctions": {
					"scope": "resource",
					"default": [
						"M98",
						"G65"
					],
					"description": "%macro.callFunctions.description%",
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"macro.keywords": {
					"scope": "resource",
					"type": "array",
					"description": "custom keywords",
					"items": {
						"type": "object",
						"default": {
							"symbol": "special symbol",
							"scope": "macrovar",
							"description": "this text will be shown on hover and completion"
						},
						"properties": {
							"type": "object",
							"symbol": {
								"type": "string"
							},
							"scope": {
								"type": "string",
								"enum": [
									"number",
									"macrovar",
									"constant",
									"language",
									"label",
									"code",
									"parameter",
									"address",
									"custom_1",
									"custom_2",
									"custom_3",
									"custom_4",
									"custom_5"
								]
							},
							"description": {},
							"nodeType": {
								"type": "string",
								"enum": [
									"",
									"Label",
									"Symbol",
									"Variable",
									"Code"
								]
							}
						}
					}
				},
				"macro.lint": {
					"scope": "resource",
					"type": "object",
					"description": "%macro.lint.description%",
					"properties": {
						"rules": {
							"type": "object",
							"default": {},
							"properties": {
								"duplicateInclude": {
									"type": "string",
									"default": "error",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"duplicateDeclaration": {
									"type": "string",
									"default": "error",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"duplicateFunction": {
									"type": "string",
									"default": "warning",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"duplicateAddress": {
									"type": "string",
									"default": "ignore",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"duplicateSequence": {
									"type": "string",
									"default": "warning",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"duplicateLabel": {
									"type": "string",
									"default": "warning",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"duplicateLabelSequence": {
									"type": "string",
									"default": "warning",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"unknownSymbol": {
									"type": "string",
									"default": "error",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"whileLogicOperator": {
									"type": "string",
									"default": "error",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"doEndNumberTooBig": {
									"type": "string",
									"default": "error",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"doEndNumberNotEqual": {
									"type": "string",
									"default": "error",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"nestingTooDeep": {
									"type": "string",
									"default": "error",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"duplicateDoEndNumber": {
									"type": "string",
									"default": "warning",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"mixedConditionals": {
									"type": "string",
									"default": "error",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"tooManyConditionals": {
									"type": "string",
									"default": "error",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"seqNotFound": {
									"type": "string",
									"default": "error",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"incompleteParameter": {
									"type": "string",
									"default": "error",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"includeNotFound": {
									"type": "string",
									"default": "error",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"assignmentConstant": {
									"type": "string",
									"default": "ignore",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"blockDelNumber": {
									"type": "string",
									"default": "ignore",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								},
								"unsuitableNNAddress": {
									"type": "string",
									"default": "ignore",
									"enum": [
										"error",
										"warning",
										"ignore"
									]
								}
							}
						}
					}
				},
				"macro.sequence.base": {
					"scope": "window",
					"type": "integer",
					"default": 1000,
					"description": "%macro.sequence.base.description%"
				},
				"macro.sequence.increment": {
					"scope": "window",
					"type": "integer",
					"default": 10,
					"description": "%macro.sequence.increment.description%"
				},
				"macro.validate.enable": {
					"scope": "resource",
					"type": "boolean",
					"default": true,
					"description": "%macro.validate.enable.description%"
				},
				"macro.validate.workspace": {
					"scope": "resource",
					"type": "boolean",
					"default": true,
					"markdownDescription": "%macro.validate.workspace.description%"
				},
				"macro.validate.onBuild": {
					"scope": "resource",
					"type": "boolean",
					"default": false,
					"markdownDescription": "%macro.validate.onBuild.description%"
				},
				"macro.build.compiler": {
					"type": "string",
					"scope": "resource",
					"enum": [
						"MCOMPI",
						"MCOMP0",
						"MCOMP30I",
						"MCOMP15",
						"MCOMP15I"
					],
					"default": "MCOMPI",
					"description": "%macro.build.compiler.description%",
					"$id": "1"
				},
				"macro.build.controlType": {
					"type": "string",
					"scope": "resource",
					"enum": [
						"",
						"0",
						"30",
						"PM",
						"0F"
					],
					"default": "",
					"description": "%macro.build.controlType.description%",
					"$id": "2"
				},
				"macro.build.compilerParams": {
					"type": "string",
					"scope": "resource",
					"default": "",
					"description": "%macro.build.compilerParams.description%",
					"$id": "3"
				},
				"macro.build.linkerParams": {
					"type": "string",
					"scope": "resource",
					"default": "",
					"description": "%macro.build.linkerParams.description%",
					"$id": "4"
				},
				"macro.build.makeFile": {
					"type": "string",
					"scope": "resource",
					"default": "",
					"description": "%macro.build.makeFile.description%",
					"$id": "5"
				},
				"macro.project.exportPath": {
					"type": "string",
					"scope": "resource",
					"default": "",
					"description": "%macro.project.exportPath.description%",
					"$id": "6"
				},
				"macro.project.sourcePath": {
					"type": "string",
					"scope": "resource",
					"default": "",
					"description": "%macro.project.sourcePath.description%",
					"$id": "7"
				},
				"macro.project.buildPath": {
					"type": "string",
					"scope": "resource",
					"default": "",
					"description": "%macro.project.buildPath.description%",
					"$id": "8"
				},
				"macro.project.linkPath": {
					"type": "string",
					"scope": "resource",
					"default": "",
					"description": "%macro.project.linkPath.description%",
					"$id": "9"
				}
			}
		},
		"problemMatchers": [
			{
				"name": "macro",
				"fileLocation": [
					"relative",
					"${fileDirname}"
				],
				"source": "macro",
				"pattern": {
					"regexp": "([0-9a-zA-Z\\._]+.LST).([0-9]+).(.*)",
					"file": 1,
					"line": 2,
					"message": 3
				}
			}
		],
		"taskDefinitions": [
			{
				"type": "shell"
			}
		],
		"semanticTokenTypes": [
			{
				"id": "number",
				"description": "Style for compile-time number"
			},
			{
				"id": "macrovar",
				"description": "Style for compile-time # macro variable symbol"
			},
			{
				"id": "constant",
				"description": "Style for compile-time constant symbol"
			},
			{
				"id": "language",
				"description": "Style for compile-time language constant symbol"
			},
			{
				"id": "code",
				"description": "Style for compile-time M-Code/G-Code"
			},
			{
				"id": "parameter",
				"description": "Style for compile-time NC-Parameter"
			},
			{
				"id": "address",
				"description": "Style for compile-time Address"
			},
			{
				"id": "custom_1",
				"description": "Style for compile-time custom symbol"
			},
			{
				"id": "custom_2",
				"description": "Style for compile-time custom symbol"
			},
			{
				"id": "custom_3",
				"description": "Style for compile-time custom symbol"
			},
			{
				"id": "custom_4",
				"description": "Style for compile-time custom symbol"
			},
			{
				"id": "custom_5",
				"description": "Style for compile-time custom symbol"
			}
		],
		"semanticTokenModifiers": [],
		"semanticTokenScopes": [
			{
				"language": "macro",
				"scopes": {
					"number": [
						"variable.macro"
					],
					"macrovar": [
						"variable.other.field"
					],
					"constant": [
						"constant.other.numeric"
					],
					"language": [
						"constant.language"
					],
					"label": [
						"entity.name.label"
					],
					"code": [
						"keyword.other"
					],
					"parameter": [
						"storage.type.parameter"
					],
					"address": [
						"support.variable.property"
					]
				}
			}
		]
	},
	"scripts": {
		"compile": "tsc -b",
		"compile:client": "tsc -b ./client/tsconfig.json",
		"compile:server": "tsc -b ./server/tsconfig.json",
		"watch": "tsc -b -w",
		"lint": "npm run lint:client && npm run lint:server",
		"lint:client": "eslint --config ./client/.eslintrc.json ./client/src/*.ts",
		"lint:server": "eslint --config ./server/.eslintrc.json ./server/src/*.ts",
		"clean": "rimraf client/out && rimraf server/out",
		"postinstall": "cd client && npm install && cd ../server && npm install && cd ..",
		"test": "sh ./scripts/e2e.sh",
		"unit-test": "npm run compile && mocha",
		"deploy": "vsce publish --yarn"
	},
	"devDependencies": {
		"@types/glob": "^7.2.0",
		"@types/mocha": "^9.1.0",
		"@types/node": "^17.0.14",
		"@typescript-eslint/eslint-plugin": "^5.26.0",
		"@typescript-eslint/parser": "^5.26.0",
		"del": "^6.1.0",
		"eslint": "^8.16.0 ",
		"event-stream": "^4.0.1",
		"gulp": "^5.0.0",
		"gulp-filter": "^7.0.0",
		"gulp-sourcemaps": "^3.0.0",
		"gulp-typescript": "^6.0.0-alpha.1",
		"intrinsic": "^2.0.1",
		"mocha": "^10.0.0",
		"run-sequence": "^2.2.1",
		"typescript": "^4.7.2",
		"vsce": "^2.8.0",
		"vscode-nls-dev": "^4.0.0"
	}
}
